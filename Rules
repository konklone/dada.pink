#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

BYPASS_FILES = %w(404.html crossdomain.xml humans.txt robots.txt) unless defined?(BYPASS_FILES)
IMAGE_COMPRESS_OPTIONS = { :pngout => false } unless defined?(IMAGE_COMPRESS_OPTIONS)

BYPASS_FILES.each do |file|
  compile("/#{file.sub /\..+/, ''}/") do
    # don't filter bypass files
  end
end

compile %r{/_.+/$} do
  # don't filter partials
end

compile '/css/*/' do
  filter :sass, Compass.sass_engine_options
end

compile '/js/*/' do
  filter :concat_js
  filter :uglify_js
end

compile '/(apple-touch*|favicon)' do
# filter :image_compressor, IMAGE_COMPRESS_OPTIONS if item.binary?
end

compile '/img/*/' do
# filter :image_compressor, IMAGE_COMPRESS_OPTIONS if item.binary?
end

compile '/CNAME' do
# just copy it.
end

compile '/!/feed/' do
  filter :erb
end

compile '/' do
  filter :haml
  layout 'base'
  filter :cache_buster
  filter :relativize_paths, {:type => :html}
end

compile '/(data|ergonomics|scarsdale|doodles|!)/' do
  filter :haml
  layout 'base'
  filter :cache_buster
  filter :relativize_paths, {:type => :html}
end

compile '/!/*/*' do
  if item.binary?
#   case item[:extension]
#   when 'png'
#     filter :image_compressor, IMAGE_COMPRESS_OPTIONS if item.binary?
#   end
    # Don’t filter other binary items
  else
    case item[:extension]
    when 'html'
      # Doesn't need filtering.
    when 'md'
      filter :erb
      filter :kramdown
    when 'haml'
      filter :haml, :format => :html5
    else
      filter :erb
    end
    if %w(html haml md).include?(item[:extension])
      layout 'article'
      layout 'base'
#     filter :colorize_syntax
      filter :cache_buster
#     filter :relativize_paths, {:type => :html}
    end
  end
end

BYPASS_FILES.each do |file|
  route("/#{file.sub /\..+/, ''}/") do
    "/#{file}" # route bypass files as is
  end
end

route %r{/_.+/$} do
  nil # don't route partials
end

route '/css/*/' do
  fp = fingerprint(item[:filename])
  item.identifier.chop + fp + '.css'
end

route '/js/*/' do
  fp = fingerprint(item[:filename])
  item.identifier.chop + fp + '.js'
end

route '/!/feed/' do
  '/!/feed.xml'
end

route '/CNAME' do
  '/CNAME'
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
# elsif item.identifier.chop.split('/')[-1] == 'index'
#   item.identifier + '.html'
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :haml, :format => :html5
