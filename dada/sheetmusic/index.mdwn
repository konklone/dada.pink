(data table slide)

The [data table](http://www.datakind.org/blog/whats-in-a-table/)
is an intuitive paradigm for many people. In a tidy data table, rows
correspond to observations/records, and columns to variables/attributes
collected about each observation/record.

[![Tom holding a letterpress print of a CSV file](/dada/print-formaldehyde/csv-print.jpg)](/dada/print-formaldehyde)

We can use spreadsheets to represent data tables, and we can use
data tables to represent musical scores.

![spreadsheet versus ordinary sheet music](sheetmusic-side-by-side.png)

In this figure we see music represented in two forms.

<!--
(spreadsheet versus ordinary sheet music slide, with column/staff highlighted)

Each column in the spreadsheet corresponds to a staff in the sheet music,
-->

![spreadsheet versus ordinary sheet music slide, with row/beat highlighted](sheetmusic-side-by-side-highlighted-rowbeat.png)

Each row in the spreadsheet corresponds to a beat,

![](sheetmusic-function-call.png)

and different notes are in different columns.
Here is how my music synthesizer, SheetMusic, does the conversion
between spreadsheets and ordinary sheet music.

<!--
(spreadsheet versus ordinary sheet music slide, with styles for dynamics)

We can use color to represent dynamics (how loud or soft the sound is).
-->

![spreadsheet versus ordinary sheet music slide, with borders for bars](sheetmusic-side-by-side-highlighted-borderbar.png)

Music is often divided into measures. In sheet music, this is typically
represented with bars, and we can do the same in spreadsheets.

> I like tables.
> ==============

The point here is that lots of things can be represented as data tables.
Spreadsheets are a good way for working with data tables, so we can use
spreadsheets to work with music.

![synthesizer functions](synthesizer-functions.png)

But spreadsheets are also code, so we can use them to make music!
For example, sheetmusic provides a "third_interval" function for making
a third interval in a particular key.

% Explain, functions, examples

I find that people are overly constrained in their perception of what
different software tools can do.

> Some data analysis tools
>
> **Spreadsheet**: Gnumeric, Excel, LibreOffice Calc
> **R**: ddr
> **Python (pandas)**: ddpy, numpy
> **Relational databases: PostgreSQL, SQL Server, MySQL, SQLite

In particular, people think of things
like spreadsheets as specialized data analysis software even though they
function as generalized application programming languages.

![A picture of csvsoundsystem]()

My colleagues at csv soundsystem and I have written music synthesizers
for several data analysis programs.

> Music synthesizers for data analysis programs
>
> **Spreadsheet** (Gnumeric): sheetmusic
> **R**: ddr
> **Python (pandas)**: ddpy
> Next stop: **PostgreSQL**?

[![](fms-r-1.png)](https://twitter.com/luisdaniel12/status/298941619707731968)

We started out by writing a music video in R.

(slide with fms symphony)

One benefit of this approach is that it lets us make music from empirical data.
Here's a music video about the finances of the United States government.
(Explain what's in the video.)

The basic paradigm is to represent musical scores in data structures that
are designed for storing data tables.

    library(ddr)
    ddr_init()

    # Let's use ChickWeight - Iris is so played out...
    chicks <- arpeggidata(sqrt(ChickWeight$weight),
                          blip,
                          scale="Emajor",
                          bpm=200,
                          count=1/32)
    play(chicks)

In R, this is the `data.frame`, which is composed of vectors.

    df = pandas.DataFrame({'minor':[50, 52, 53, 55, 57, 58, 60, 62]})
    to_midi(df, 'minor_scale.mid')

In pandas (Python), this is the `DataFrame`.

[![](fms-r-3.png)](https://twitter.com/luisdaniel12/status/298941619707731968)

I like to represent music as data tables because I'm very used to thinking
about data tables, but it turns out that other nice things happen when we
use data analysis software to make music.

> What isn't data analysis?
> ============================

When we start using data analysis software for other things,
we also blur the line between data analysis and other things.
Data analysis seems very magical to many people. When we represent
data as familiar things like music, the analysis becomes more
accessible.

![abstract data](iris.png)

Numbers are abstract, theoretical things that don't have to be
related to the world. Given how strange numbers are, all of this
data stuff can seem very magical. In contrast, most people can
grasp the concept of guacamole quite well.

![concrete guacamole](data-guacamole.jpg)

Guacamole is a tasty but otherwise quite straightforward thing
that you can see and touch and taste and smell.

When I say that data things are "magical" to people, I mean that
people don't recognize that we can convert between these abstract
numbers and this real world. A big step in understanding this data
stuff is understanding how we make these conversions.

It turns out that the guacamole you see here is actually data-driven;
each bowl of guacamole represents New York City math test scores for
a different year, and the different ingredients correspond to the
average scores for students of different years in school. The bowl
to the right has more guacamole because of grade inflation---scores
went up across the board. One of the bowls (I don't remember which.)
is a bit spicier, because school years corresponding to pepper and
cilantro had relatively high grades that year.

<!--
p = ggplot(iris) + aes(x = Sepal.Width, y = Sepal.Length, color = Species) + geom_point(size = 5)                   
-->
![](iris-plot.png)

As I see it, food is just another way of plotting data. The people
in this room are probably more used to representing data with a plot like this.
This plot
might look very fancy, but we can decompose it into a bunch of simple
components.

* Each dot is an iris
* The distance from the bottom is how long the iris's petal is.
* The distance from the right is how wide the iris's petal is.
* The color of the dot is the species of iris.

To use the language of the Grammar of Graphics, we have abstract data
and concrete elements, and we define aesthetics that provide mappings
between the abstract data and the concrete elements.
And there's no reason that these elements have to be graphical!

    library(geomtaco)
    ggplot(iris) + aes(meat = Species, salsa = Sepal.Length) + geom_taco()

To convert
data into music or food, we just need to come up with parametrized primitive
musical or gastronomical elements. In this line of code, we use the geom\_taco
library to produce data-driven taco recipes with ggplot2.

When we produce data-driven music or food,
we are simply using a different plotting device to map abstract data
onto real things that we can perceive.

> Summary
> ========
> 
> * Convert the world to tidy data tables.
> * Convert tidy data tables back to the world.
> * These conversions are less magical than we make them seem.
> * Data analysis software does a lot more than that.
> * So we make music from spreadsheets.

In case you fell asleep, let me remind you of everything I just said.

* We can represent lots of things as tidy data tables.
* We convert abstract data tables into concrete things.
* None of this stuff is magic, and anyone can understand it if we just explain it.
* We can blur the boundary between data analysis software and everything else.
* And thus we make music from spreadsheets.
