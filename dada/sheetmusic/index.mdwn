*These are materials for [my talk at SEMS](http://spreadsheetlab.org/2014/04/10/sems-accepted-papers-published/). Blockquotes, code blocks, and images will be slides projected for everyone to see, and everything else is things that I'll say.*

> Sheetmusic
> ==============

My colleagues and I have been making music from spreadsheets for some time.
The basic idea is to think of music as data tables. So let's start by talking
about data tables.

![](data-table-1.png)

Here's a data table.

![](data-table-2.png)

In a [tidy data table](http://www.datakind.org/blog/whats-in-a-table/),
rows correspond to things.
(You might also call them "observations" or "records".)
For example, each row in this table is a country.

![](data-table-3.png)

Columns correspond to attributes about each thing.
You might also call them "variables", "fields", "properties", or "dimensions".

We can use spreadsheets to represent data tables, and we can use
data tables to represent musical scores.

![spreadsheet versus ordinary sheet music](sheetmusic-side-by-side.png)

In this figure we see music represented in two forms.

![spreadsheet versus ordinary sheet music slide, with row/beat highlighted](sheetmusic-side-by-side-highlighted-rowbeat.png)

Each row in the table corresponds to a beat in the music.
That is, the two regions with red boxes around them correspond
to the same data. Different notes come from different columns.

![spreadsheet versus ordinary sheet music slide, with borders for bars](sheetmusic-side-by-side-highlighted-borderbar.png)

Music is often divided into measures. In sheet music, this is typically
represented with bars, and we can do the same in spreadsheets.

![](sheetmusic-function-call.png)

And that sheetmusic you saw was actually generated inside the
Sheetmusic software.

> I like tables.
> ==============

I just showed you how we can think of music as a representation
of the data in spreadsheets.

![synthesizer functions](synthesizer-functions.png)

But spreadsheets are also code, so
let's also think about musical functions as spreadsheet functions.

For example, sheetmusic provides a "third_interval" function for making
a third interval in a particular key. Here are some other functions.

> * `ionian_scale(<note>)`
> * `chord_progression(<range of notes specifying the chord>, <base note>)`
> * `dominant7_chord(<note>)`
> * `dominant7_arpeggio(<note>)`

For example, if I type "=ionian_scale('C4')", I'll get an Ionian scale
starting at middle C.

> Live demonstrations
> ==========================
> <br/>
> <br/>
> <br/>

That will, of course, make more sense when I show it to you.
I'm going to walk you through some cheesy pop music I wrote last week.

...

As you see, spreadsheets are a reasonable way of representing music.
People often don't realize how general their tools can be.
Let's talk about some other data analysis tools.

> Some data analysis tools
> ----------------------------
> <dl>
> <dt><strong>Spreadsheets</strong></dt><dd>Gnumeric, Excel, LibreOffice Calc</dd>
> <dt><strong>Data frames, linear algebra</strong></dt><dd>R, Matlab, pandas, numpy, Julia</dd>
> <dt><strong>Relational databases</strong></dt><dd>PostgreSQL, SQL Server, MySQL, SQLite</dd>
> <dt><strong>Dunno how to categorize</strong></dt><dd>SPSS, SAS, Stata, Minitab, ...</dd>
> </dl>

People usually think of these tools as specialized data analysis software,
as if they couldn't do anything else.

These tools are often used for data analysis,
but they really are generalized application programming languages.

[![A picture of csvsoundsystem]()](http://csvsoundsystem.com)

My colleagues at csv soundsystem and I have written music synthesizers
for several data analysis programs.

> Music synthesizers for data analysis programs
>
> <dl>
> <dt><strong>Gnumeric</strong></dt><dd>sheetmusic</dd>
> <dt><strong>R</strong></dt><dd>ddr</dd>
> <dt><strong>Pandas</strong></dt><dd>ddpy</dd>
> <dt>Next stop</dt><dd><strong>PostgreSQL</strong>?</dd>
> </dl>

I just showed you sheetmusic, which is for Gnumeric.
We alse have one for R called data-driven rhythms (ddr),
and one for pandas called ddpy.

We started writing these tools to assist in our production
of data-driven music videos.

Our first music video was the FMS Symphony.

[![FMS Symphony](fms.png)](http://fms.csvsoundsystem.com)

(It's also on [YouTube](http://www.youtube.com/watch?v=j1PAuOXJ5uU).)

It's about the finances of the United States government.
There are two high instruments. The more noticable one is the
interest rate on United States Treasury bonds. The less noticable
one is the distance to the debt ceiling (the amount of debt that
the United States is allowed to have). The flourishes are related
to the change in the balance of the treasury, based on these
files that we download from the Treasury website every day (click).

My favorite part is the financial crisis (click).

Okay, enough of that, you can watch the rest of it later.

[![](fms-r-1.png)](https://twitter.com/luisdaniel12/status/298941619707731968)

The fun part is that we wrote it in R.

The basic paradigm is to represent musical scores in data structures that
are designed for storing data tables.

    library(ddr)
    ddr_init()

    chicks <- arpeggidata(sqrt(ChickWeight$weight),
                          blip,
                          scale="Emajor",
                          bpm=200,
                          count=1/32)
    play(chicks)

In R, this is the `data.frame`, which is composed of vectors.
Here we map the weight of chicks to an E major scale in ddr.

    import pandas
    from ddpy import to_midi

    data = {'minor':[50, 52, 53, 55, 57, 58, 60, 62]}
    df = pandas.DataFrame(data)
    to_midi(df, 'minor_scale.mid')

In pandas (Python), this is the `DataFrame`.
Here we generate a minor scale in midi with ddpy.

[![](fms-r-3.png)](https://twitter.com/luisdaniel12/status/298941619707731968)

I think about everything as data tables, so I also think about music as
data tables. So if you want to make music and you understand data tables,
you might like our software.

That's nice in itself, but it also got me thinking more broadly about
how we think about data analysis.

> What isn't data analysis?
> ============================

When we start using data analysis software for other things,
we also blur the line between data analysis and other things.
Data analysis seems very magical to many people. When we represent
data as familiar things like music, the analysis becomes more
accessible.

![abstract data](iris.png)

Numbers are abstract, theoretical things that don't have to be
related to the world. Given how strange numbers are, all of this
data stuff can seem very magical. In contrast, most people can
grasp the concept of guacamole quite well.

![concrete guacamole](data-guacamole.jpg)

Guacamole is a tasty but otherwise quite straightforward thing
that you can see and touch and taste and smell.

When I say that data things are "magical" to people, I mean that
people don't recognize that we can convert between these abstract
numbers and this real world. A big step in understanding this data
stuff is understanding how we make these conversions.

It turns out that the guacamole you see here is actually data-driven;
each bowl of guacamole represents New York City math test scores for
a different year, and the different ingredients correspond to the
average scores for students of different years in school. The bowl
to the right has more guacamole because of grade inflation---scores
went up across the board. One of the bowls (I don't remember which.)
is a bit spicier, because school years corresponding to pepper and
cilantro had relatively high grades that year.

As I see it, food is just another way of plotting data.

<!--
p = ggplot(iris) + aes(x = Sepal.Width, y = Sepal.Length, color = Species) + geom_point(size = 5)                   
-->
![](iris-plot.png)

The people
in this room are probably more used to representing data with a plot like this.
This plot
might look very fancy, but we can decompose it into a bunch of simple
components.

* Each dot is an iris
* The distance from the bottom is how long the iris's petal is.
* The distance from the right is how wide the iris's petal is.
* The color of the dot is the species of iris.

To use the language of the Grammar of Graphics, we have abstract data
and concrete elements, and we define aesthetics that provide mappings
between the abstract data and the concrete elements.
And there's no reason that these elements have to be graphical!

    library(geomtaco)
    ggplot(iris) +
      aes(meat = Species, salsa = Sepal.Length) +
      geom_taco()

To convert
data into music or food, we just need to come up with parametrized primitive
musical or gastronomical elements. In this line of code, we use the geom\_taco
library to produce data-driven taco recipes with ggplot2.

When we produce data-driven music or food,
we are simply using a different plotting device to map abstract data
onto real things that we can perceive.

> Summary
> ========

In case you fell asleep, let me remind you of everything I just said.

> Data tables
> --------------
> * Data collection: world -> tables.
> * Data analysis: tables -> world

* We can represent lots of things as tidy data tables.
* We convert abstract data tables into concrete things in order to make sense of them.
* When people have trouble understanding data in general, I think it's because
    they don't understand these conversion steps.

> Data analysis tools are often full programming languages
> ----------------------------------------------------------

Data analysis software, like spreadsheets, SAS, R, and so on,
is often a full programming language. Thus, we can do a lot more
with these tools than we sometimes realize.

> Plots don't need to be graphical!
> ---------------------------------
> * Music (sound)
> * Food (vision, sound, taste, smell, touch)
> * Go crazy! Ant colonies, roller coasters, and playgrounds could all be plots.

Like making non-graphical plots!

In data analysis, we plot tables as real-world concepts that people can
understand. These plots don't need to be graphical! I've shown how you can
use music and food as plotting devices, and that's just the beginning.
